import supabase from '../db/supabaseClient.js';

/**
 * Fetches all active product IDs to initialize the session state.
 * In a real application, you might filter this further based on initial criteria.
 * @returns {Promise<number[]>} An array of product IDs.
 */
async function getInitialProductIds() {
  // For now, fetch all product IDs. Add filtering if needed later.
  const { data, error } = await supabase
    .from('products')
    .select('product_id'); // Only select the ID

  if (error) {
    console.error('Error fetching initial product IDs:', error);
    // Decide on error handling: throw, return empty, etc.
    // Throwing is often better to signal failure clearly.
    throw new Error('Could not fetch initial product IDs from database.');
  }
  // Ensure data is not null and map to get just the IDs
  return data ? data.map(p => p.product_id) : [];
}

/**
 * Creates a new user session in the database.
 * Initializes potential_product_ids with all active products.
 * @returns {Promise<string>} The newly created session ID.
 * @throws {Error} If session creation fails.
 */
export async function createSession() {
  console.log('Creating new user session...');
  const initialProductIds = await getInitialProductIds();

  const { data, error } = await supabase
    .from('user_sessions')
    .insert([
      {
        // session_id is generated by default (UUID)
        user_answers: {}, // Start with empty answers
        potential_product_ids: initialProductIds,
        status: 'active'
        // created_at and last_updated_at have defaults
      }
    ])
    .select('session_id') // Select the generated session_id
    .single(); // Expecting only one row back

  if (error || !data) {
    console.error('Error creating session in database:', error);
    throw new Error('Failed to create user session.');
  }

  console.log(`Session created successfully with ID: ${data.session_id}`);
  return data.session_id;
}

/**
 * Retrieves the current state of a user session.
 * @param {string} sessionId - The UUID of the session to retrieve.
 * @returns {Promise<object|null>} The session state object or null if not found.
 * @throws {Error} If database query fails.
 */
export async function getSessionState(sessionId) {
  console.log(`Fetching session state for ID: ${sessionId}`);
  if (!sessionId) {
    throw new Error('Session ID is required to fetch state.');
  }

  const { data, error } = await supabase
    .from('user_sessions')
    .select('*') // Select all columns for the state
    .eq('session_id', sessionId)
    .single(); // Expecting one or zero rows

  if (error) {
    // Differentiate between "not found" and other errors
    if (error.code === 'PGRST116') { // PostgREST code for "Resource Not Found"
      console.warn(`Session not found for ID: ${sessionId}`);
      return null;
    }
    // If it's not a "not found" error, it's some other database error
    console.error(`Error fetching session state for ID ${sessionId}:`, error);
    throw new Error('Failed to retrieve session state.');
  } // This closes the if(error) block

  console.log(`Session state retrieved for ID: ${sessionId}`);
  return data; // Returns the full session row object
}

/**
 * Updates the state of an existing user session.
 * Only updates fields provided in the updateData object.
 * Automatically updates last_updated_at via database trigger.
 * @param {string} sessionId - The UUID of the session to update.
 * @param {object} updateData - An object containing fields to update (e.g., { user_answers, potential_product_ids, last_asked_question_group, status }).
 * @returns {Promise<boolean>} True if update was successful.
 * @throws {Error} If update fails or session not found.
 */
export async function updateSessionState(sessionId, updateData) {
  console.log(`Updating session state for ID: ${sessionId}`);
  if (!sessionId) {
    throw new Error('Session ID is required to update state.');
  }
  if (!updateData || Object.keys(updateData).length === 0) {
    console.warn(`No update data provided for session ID: ${sessionId}. Skipping update.`);
    return true; // Or false, depending on desired behavior for empty updates
  }

  // We don't need to manually set last_updated_at due to the trigger
  const { error } = await supabase
    .from('user_sessions')
    .update(updateData)
    .eq('session_id', sessionId);
    // .select() // Optionally select to confirm update, but increases overhead
    // .single();

  if (error) {
    console.error(`Error updating session state for ID ${sessionId}:`, error);
    // Consider checking error code for specific issues like session not found if needed
    throw new Error('Failed to update session state.');
  }

  console.log(`Session state updated successfully for ID: ${sessionId}`);
  return true;
}